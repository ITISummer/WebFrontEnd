#bundle() {
  .button {
    display: block;
    border: 1px solid black;
    background-color: grey;
    &:hover {
      background-color: white;
    }
  }
  // .tab { ... }
  // .citation { ... }
}

#header a {
  color: orange;
  // #bundle.button();
  // #bundle > .button
  // #bundle .button;

}

/* --------------------- */
.lazy-eval {
  width: @var;
  @a: 9%;
}

@var: @a;
@a: 100%;

/* --------------------- */
.block {
  color: red; 
  .inner {
    background-color: $color; 
  }
  color: blue;  
} 

/* --------------------- */
.grand {
  .parent {
    & > & {
      color: red;
    }

    & & {
      color: green;
    }

    && {
      color: blue;
    }

    &, &ish {
      color: cyan;
    }
  }
}

/* --------------------- */
nav ul {
  &:extend(.inline);
  background: blue;
}
.inline {
  color: red;
}
/* --------------------- */
.animal {
  &:extend(.bear);
  background-color: black;
  color: white;
}
.bear {
  &:extend(.animal);
  background-color: brown;
}
/* --------------------- */
li.list > a {
  color: rebeccapurple;
  // list styles
}
button.list-style {
  &:extend(li.list > a); // use the same list styles
}
/* --------------------- */
.myclass() {
  // .mixin();
  box-shadow+: 0 0 20px black;
}
.mixin {
  .myclass();
  box-shadow+: 0 0 10px #555;
}

/* --------------------- */
#outer() {
  #inner {
    color: black;
  }
}

.c {
  #outer#inner();
}
/* --------------------- */
#my-library {
  .my-mixin() {
    color: black;
  }
}
// which can be used like this
.class {
  #my-library.my-mixin();
}
/* --------------------- */
.mixin(@color: red) {
  color-1: @color;
}
.mixin(@color, @padding: 2) {
  color-2: @color;
  padding-2: @padding;
}
.mixin(@color, @padding, @margin: 2) {
  color-3: @color;
  padding-3: @padding;
  margin: @margin @margin @margin @margin;
}
.some .selector div {
  .mixin(#008000);
}
/* --------------------- */
.average(@x, @y) {
  @result: ((@x + @y) / 2);
  color: red;
}

div {
  // call a mixin and look up its final value
  padding: .average(16px, 50px)[];
}